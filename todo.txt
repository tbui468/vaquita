    Efficiency of dbms can be estimated with number IO operations

    Use gdb to walk through code (Cherno recommended debugger to learn to read code)
        https://www.cs.yale.edu/homes/aspnes/pinewiki/C(2f)Debugging.html
        Try it on the xv6 (or the risc-v version) - would gdb even work with vm?

    https://github.com/firstcontributions/first-contributionsool
        go to this link and do a basic contribution

    Use ChatGPT to help write paper on neural network to learn
        eviction policy for pager - integration of neural networks
        into legacy code

    Use Yahoo or some other database standard metric to focus on core features

    cstack.github.io for short guide to basics of SQL implementation (not complete)

*******************************Storage Engine*******************************************
    static uint32_t vdbtree_leaf_split(struct VdbTree* tree, uint32_t idx, uint32_t new_right_key) <-------FINISH THIS
        a few functions are not implemented yet

        deal with situation when parent is full

    Deal with situation when leaves/interns are full
        Currently breaks on insertion of 8th record (key is 0 - probably idx/record overwriting eachother in buffer)
        splitting leaves
        splitting internal nodes if:
            root
            parent of internal node is below capacity
            parent of internal node is at/above capacity

        Uncomment vdbtree_traverse_to to allow checking of children nodes (only checking right ptr now)

    Need index cells in data blocks (which we don't have now) since it will be required when data blocks
        need to be defragmented (unless there's a way to defrag without index cells...)
        Easier to change 'free' field into datacells size (since is easy to compute from end of the page)

    update records

    delete records

    pager eviction policy
        make db really big so that the program crashes because of too much memory allocated, then evict pages to fix it

    Concurrency - need to get read/write locks on file

    Transactions - need a way of rolling back changes if transaction fails

    Logging - database should never be in inconsistent state if system fails

************************Execution Engine**********************

    Execution engine
        selection WHERE
        projection SELECT 

        See SQL-92 for the standard to quality as 'supporting SQL'

        Foreign keys

