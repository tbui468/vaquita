    Efficiency of dbms can be estimated with number IO operations

    Use gdb to walk through code (Cherno recommended debugger to learn to read code)
        https://www.cs.yale.edu/homes/aspnes/pinewiki/C(2f)Debugging.html
        Try it on the xv6 (or the risc-v version) - would gdb even work with vm?

    https://github.com/firstcontributions/first-contributionsool
        go to this link and do a basic contribution

    Use ChatGPT to help write paper on neural network to learn
        eviction policy for pager - integration of neural networks
        into legacy code

    Use Yahoo or some other database standard metric to focus on core features

    cstack.github.io for short guide to basics of SQL implementation (not complete)

    Read Edward Sciore's book on implementing a relational database

    Use SDL and Vulkan to visualize SQL + b-tree (2d first, and then 3d)
        visualize how b-tree grows and nodes split as new entries are added
        visualize how tree is traversed as data is queried
        use ipc (?) to have two programs talk to each other:
            use vdb REPL to modify database
            run visualization program to read vdb data to visualize it

*******************************Storage Engine*******************************************
    delete records

    update records
        update fixedlen data in record
        for varlen data:
            if new string is same size, just replace
            elif new string is different size
                1. find empty space in freelist that matches perfectly
                2. allocate new space at end of current data block
                put old string space into freelist

    Verify that delete and update use freelist properly

    Fields need names so that we can select certain attributes only
        This needs to be implemented before 'select' can be implemented (projection)
        Datablock needs to be attached to metanode

    Test making multiple trees - insert and fetch data from multiple trees (tables)

    REPL
        basic parsing of commands
            > open school;
            > create table students (name string, age int, male bool);
            > insert into students (name, age, male) values ("Bob", 12, true);
            > insert into students (name, age, male) values ("Kate", 11, false);
            > insert into students (name, age, male) values ("Kate", 13, false);
            > select * from students;
            > select id, name from students;
            > select id, name, male from students where age >= 12;
            > drop table students;
            > close school;

        executing SQL to open/close databases, create/drop table, insert/update/delete/fetch records
        Have C code fill in database with default data first, then query in repl

    Cursor abstraction - would this be helpful as the intermediary between vdb.c and tree.c?
        will we need to know which attribute to index by? (primary key should be default)
        vdbcursor_to_end()
        vdbcursor_to(key)
        vdbcurosr_next()

    Need index cells in data blocks (which we don't have now) since it will be required when data blocks
        need to be defragmented (unless there's a way to defrag without index cells...)
        Change 'free' field in data blocks into datacells size like in leaf/intern nodes. (since is easy to compute from end of the page)
        vdbtree_leaf_defrag(tree, leaf)
            uses data in leaf (eg, deleted records) to defrag data blocks attached to that leaf

    pager eviction policy
        make db really big so that the program crashes because of too much memory allocated, then evict pages to fix it
        Or just manually limit number of pages allowed to hold at a time
        Use O_DIRECT to bypass OS pager

    Foreign keys to connect two or more tables
        joins will be needed here

    Custom keys
        Unique or not?
        Have to rewrite tree to split/merge based on where inserted (since it will not be in order anymore)

    Concurrency - need to get read/write locks on file

    Transactions - need a way of rolling back changes if transaction fails

    Logging - database should never be in inconsistent state if system fails

************************Execution Engine**********************

    Execution engine
        selection WHERE
        projection SELECT 

        See SQL-92 for the standard to quality as 'supporting SQL'

        Foreign keys

