    Efficiency of dbms can be estimated with number IO operations

    Use gdb to walk through code (Cherno recommended debugger to learn to read code)
        https://www.cs.yale.edu/homes/aspnes/pinewiki/C(2f)Debugging.html
        Try it on the xv6 (or the risc-v version) - would gdb even work with vm?

    https://github.com/firstcontributions/first-contributionsool
        go to this link and do a basic contribution

    Use ChatGPT to help write paper on neural network to learn
        eviction policy for pager - integration of neural networks
        into legacy code

    check out nandgame for website on how to create processor from scratch
        then try to do it using verilog

    Use Yahoo or some other database standard metric to focus on core features

    cstack.github.io for short guide to basics of SQL implementation (not complete)

    Read Edward Sciore's book on implementing a relational database
        Chapter 4: Memory Management (PDF 92)

    Use SDL and Vulkan to visualize stars/planets/moons in galaxy

    sqlite documentation has great explanation of how bytecode works

***********************Documentation*****************************
Example
Major components
Todos

**********************************Client**************************
The dbms should run as a server (rather than embedded) and have a scheduler that
    gives connecting clients the illusion that they have sole access to the dbms

    Seems like mysql uses tcp sockets

    Some basic SQL implemented in parser:
        vdb > connect 3000;
        vdb > show databases;
        vdb > create database school;
        vdb > open school;
        
        vdb:school > show tables;
        vdb:school > create table students (name string, age int, grad bool);
        vdb:school > describe students;
        vdb:school > insert into students (name, age, male) values ("Bob", 12, true);
        vdb:school > insert into students (name, age, male) values ("Kate", 13, false), ("John", 14, true);
        vdb:school > update students set name = "Jim", age = 12, male = true where id = 2;
        vdb:school > delete from students where id = 1;
        vdb:school > select * from students;
        vdb:school > select id, name from students;
        vdb:school > select id, name, male from students where age >= 12;
        vdb:school > drop table students;
        vdb:school > close school;

        vdb > drop database school;
        vdb > exit;

*******************************TODO**************************************************
    VDBT_TYPE_FLOAT
    VDBT_FLOAT

    Use sample data to make sure SQL kinda works
        https://nssdc.gsfc.nasa.gov/planetary/factsheet/index.html
            use data here in sample database

            create table planets (name string, 
                                  mass float,
                                  diameter int, 
                                  density int, 
                                  gravity float, 
                                  escape_velocity float, 
                                  rotation_period float, 
                                  length_of_day float, 
                                  distance_from_sun float, 
                                  perihelion float, 
                                  orbital_period float, 
                                  orbital_velocity float, 
                                  orbital_inclination float, 
                                  orbital_eccentricity float, 
                                  obliquity_of_orbit float, 
                                  mean_temperature int, 
                                  surface_pressure float, 
                                  number_of_moons int, 
                                  ring_system bool, 
                                  global_magnetic_field bool); <----some of these will be NULL

            write SQL script to make database solar_system
            tables planets, moons, dwarf_planets

    Does struct VdbDatum really need to store struct VdbString as a pointer?
        couldn't it just save the value itself, and leave the pointer to only refer to the d.as.Str->start?
        this would simplify our code a lot and minimize the chances of a memory leak

    Rewrite parser to parse expressions instead of bespoke tuple parsing functions:
        Should use parser to parse assignment (using 'set' keyword)
        Should use parser to parse tuples (sequence in parenthesese, separated by commas)

    cursor abstraction:
        cursors are created when starting a new transaction, and destroyed when transaction ends (commit or not)
        a cursor is associated with a table AND an ordering (eg, by which column the records are indexed)
        a cursor has a closed and open state:
            <open stmt> opens a cursor
            <close stmt>, <commit stmt>, or <rollback stmt> closes cursor
        cursor may be before first record or one past the last record
        fetch - moves cursor to next record and returns that record
        delete - deletes record pointed to by cursor - moves cursor to next record after deletion
        update - updates records pointed to by cursor

    to update
        struct VdbCursor* cursor = vdbcursor_init_at(h, table_name, key);
        initialize a cursor at key
        write record there

    to delete
        make sure increment skips deleted records
        initialize a cursor at key
        delete record there

    add more test cases
        use python to automate running of program with test scripts
        
    need checks to prevent table manipulation/creation/dropping when database not open - segfaulting now

    need to return error if table doesn't exist when insert/select/update/delete - segfaulting now

    pager eviction policy
        make db really big so that the program crashes because of too much memory allocated, then evict pages to fix it
        Or just manually limit number of pages allowed to hold at a time
        Use O_DIRECT to bypass OS pager

    Concurrency - need to get read/write locks on file
        pager can take care of this

    Transactions - need a way of rolling back changes if transaction fails
        need a way to track undos (a stack???)

    Logging - database should never be in inconsistent state if system fails
        sqlite uses a write-ahead log


    Connect cli and the database tree to get useful data - play with MariaDB or MySQL to see how they print outputs
        > open school
            database school opened
        > select * from students
            +----+------+-----+
            | id | name | age |
            +----+------+-----+
            |  1 | John |  23 |
            |  2 | Kate |  12 |
            |  3 | Timm |  22 |
            +----+------+-----+
            3 rows in set
        > close school
            database school closed
            [what message?]

    Foreign keys to connect two or more tables
        joins will be needed here

    Custom keys
        Unique or not?
        Have to rewrite tree to split/merge based on where inserted (since it will not be in order anymore)
************************Execution Engine**********************

    Execution engine
        selection WHERE
        projection SELECT 

        See SQL-92 for the standard to quality as 'supporting SQL'

        Foreign keys

