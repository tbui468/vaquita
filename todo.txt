TODO: Storage engine
    Implement splitting of leaves when this occurs
        _tree_traverse_to_leaf shouldn't really need the table_name
            pass it the pager along with an index representing the table/file descriptor needed
        _tree_traverse_to_leaf should return leaf and parent node (parent is necessary when inserting) <---------START HERE

        _tree_split_leaf should just split the leaf and update any necessary data
        _tree_insert_record will have to traverse the tree again to insert a record

    void tree_insert_record(struct VdbPager* pager, FILE* f, const char* table_name, struct VdbData* d) {
        split node when too big - write test code to insert a ton of records until leaf is over threshold
        implement split a node (leaf node)
    
        splitting a leaf may cause internal node to require splitting - write code to cause this
        implement splitting of node (internal node - this may propagate all the way up to root, splitting root and making a new root)

    int vdb_delete_record(VDBHANDLE h , const char* table);

    pager_fetch_page(uint32_t* buf, uint32_t idx);
Execution Engine
    virtual machine for running straightline code (which we need to define)
        predicates and combinations of it will be useful here
    How to compile SQL to produce straight line code to run in vm
    Make it a distributed system - add network support

Vaquita Relational Database
    vdb.c
        vdb_open(struct DB* db, const char* name); - opens a database with given name
        vdb_create_table(struct DB* db, const char* table_name, enum Field* fields, int field_count); - adds table to database with given schema
        vdb_drop_table(struct DB* db, const char* table_name);
        vdb_insert_record(struct DB* db, const char* table_name, ...); - number/type of variable arguments must match table schema
        vdb_delete_record(struct DB* db, const char* table_name, int key);
        vdb_get_by_primary_key(struct DB*, uint64_t primary_key); - get table record by id //will add SQL query engine later

    tree.c - tree grabs blocks it needs and will need to figure out offsets to get proper tree data/metadata
        vdb_tree_read(struct DB* db, int off, uint8_t* buf, int len) { //this should be atomic
            //compute correct block index
            vdb_pager_read_lock();
            struct Block* b = vdb_pager_read_block(correct block index);
            //do whatever necessary to b
            vdb_pager_un_lock();
        }
        vdb_tree_write(struct DB* db, int off, uint8_t* buf, int len) { //this should be atomic
            //compute correct block index
            vdb_pager_write_lock();
            struct Block* b = vdb_pager_read_block(correct block index);
            //write data to b
            vdb_pager_write_block(index);
            vdb_pager_un_lock();
        }

        other functions for traversing tree and finding free records

    pager.c - pager only knows about blocks
        vdb_pager_read_lock(struct DB* db, int off, int len);
        vdb_pager_write_lock(struct DB* db, int off, int len);
        vdb_pager_un_lock(struct DB* db, int off, int len);
        vdb_pager_read_block(struct Block* b, int idx);
        vdb_pager_write_block(struct Block* b, int idx, uint8_t* buf, int len);



Database Internals
    Chapter 1: Introduction and Overview (PDF 27)
        What is the difference between row and column oriented data layouts?
            row-oriented stores data in tuples
            column stores data by fields
        Is a wide column store the same as a column-oriented database?
            No, but I'm not sure what wide column store is
        What is the difference between a primary and secondary key?
            Primary key (usually incremented integer) points to data
            Secondary key either references primary key OR references data (depending on implementation)

    Chapter 2: B-Tree Basics (PDF 45)
        How can a rotation step be used to keep a binary tree balance?
            Change root if one side is higher
        How are fanout and height of a tree related?
            fanout are how many children per node.  More children, less height (give the same number of nodes)
        Why is sequential vs random I/O access not as important in SSDs compared to HDDs?
            Spinning head in HDD is super slow, so access sequential sectors on disk is a fair bit faster
            SSDs uses cells, so it's not a big of a deal (but sequential is still faster here too)
        What is a 2-3 tree?
            Two indices, and three children per node
        What is the difference between a B-Tree and B+-Tree?
            B-Trees store data in internal and leaf nodes, and B+-Trees only store them in leaves
        When does a node need to be split?
            Too many children (over a set max capacity)
        When does splitting cause the B-Tree to grow in height?
            When splitting a node cause the root to need to be split too
        When should nodes be merged?
            When children count in under a set threshhold
    
    Chapter 3: File Formats (PDF 65)
        What is a slotted layout?
            Using an offset section to allow easier reuse of slots and easy rearranging of slots
        In a slotted layout page, how are pointers and cells related?
            pointers point to cells
        How are nodes and pages related?  (eg, how many nodes per page?)
            A node is normally represented as a page
        What mechanisms can be used to ensure (at least attempt) data was not accidentally corrupted?
            checksums

    Chapter 4: Implementing B-Trees (PDF 81)
        What can magic numbers be used for? 
            sanity check
        What are sibling links, and why are they useful?
            links between sibling nodes - don't need to have access to parent to find siblings of a node
        What are overflow pages?
            A node is normally a single page, but if all data doesn't fit, it can refer to a new page that
            stores the extra data
        Why are breadcrumbs used with B-Trees, and what data structure is commonly used to store breadcrumbs?
            trace route down the tree so that changes can be made (sometimes a parent is needed to find a 
            sibling of a node, eg when splitting and merging).  A stack can be used.
        Why are nodes 'rebalanced' instead of merged/split sometimes?
            quicker than merging and splitting - kicking the can down the road
        What are right-only appends?
            If index is greater than all other indices (eg, primary key when using autoincrementing keys)
            then it's a way to optimize insertion by skipping the read part of the tree to find the correct
            place to insert the key/record
        What is bulk-loading and how does it relate to right-only appends?
            If loading records in sorted order, using right-only appends can optimize loading
        What's the purpose of compressing data?
            Make it take less disk space
        What is compaction/vacuum/maintenance?
            Combine free space into a larger segment

    Chapter 5: Transaction Processing and Recovery (PDF 99)
        What can the O_DIRECT flag be used for when opening a file?
            Bypass kernel buffer when doing disk access
        What is a referenced page?
            Page that is used in the current transaction...?
        What is a pinned page?
            bit to signify that page is being used, so the pager should not evict it
        What is a dirty page?
            page has been updated, so it needs to be flushed 
        What is an LFU eviction policy?
            least frequently used policy.  
        Is the write-ahead log written to memory or to disk?
            disk - this allows recovery in case of power failure (or other failure)
        What is a log sequence number used for?
            sequence of operations in a log.  The number is needed for knowing how much of the log has
            already been applied to the file on disk.  Related to checkpointing???
        When using shadow paging, what is the difference between a physical log and a logical log?
            physical log shows the differences between the old page and new page
            logical log shows the operations necessary to undo a new page back to the old page
        How are force/steal policies related to transaction commits?
            steal means pushing pages to disk even if not commited to make space (which could be bad)
                wouldn't this require the page to be reverted if the transaction fails????
            force means push page to disk after every commit (and not waiting even if other transactions will need to commit same page)
        How can deadlocks be handled?
            timeout, 
        What is latch crabbing?
            latch a single node at at time, and then unlock prev / lock next node as the tree is traversed
            this is more complex than simply locking entire file, but it allows for more processes/threads to
            use the file/tree at the same time.  

    Chapter 6: B-Tree Variants (PDF 131)
        What is the purpose of a copy-on-write mechanism (I had a wrong impression of this before)?
            Make a copy, write to that copy, and then after the entire write is done merge with original...
        What is the point of all these B-Tree variants?  What problem are they trying to solve?
            copy-on-write variations, buffer updates to amortize cost of writing to tree/file
        BW-Trees solve what problem that buffering updates doesn't?  (FD-Trees and Lazy B-Trees buffer updates)
            don't remember
        
    Chapter 7: Log-Structured Storage (PDF 149)
        What is the purpose of a LSM-Tree?
            Faster writing
            Implementation of copy-on-write.
            Buffers writes and then does it all at one time sequentially
        What problems does it solve that B-Trees (and its buffered updates variants) don't solve?
            ??? 
        What are some of the drawbacks of LSM-Trees?
            Slower reads.

    Chapter 8: Introduction and Overview (PDF 191)
        What is the difference between concurrency and parallelism (think of the coffee machines and queues example)?
            Concurrency means two things are happening at the same time, but only one gets to go at a time
            Parallelism means two things are happending at the same time AND both get to go at the same time
        Distributed systems are complex, so why would we even make a database distributed?
            Redundancy - if one database fails, then a different one holding the same data can be accessed
        A fair-loss link is similar to what network protocol?
            UDP
        What is a stubborn-link?
            Keeps sending data until ack is received...?
        A perfect-link is similar to what network protocol?  How is it different from a stubborn-link?
            TCP.  It checks acknowledgements.
        The FLP Impossibility Problem says that there is no consensus algorithm in a bounded time for an asynchronous system, why does this not apply for real systems?
            Real systems are not completely asynchronous?  Not completely random time for messages to arrive, etc.  There is some sychrony...?
        What is a network partition?
            Nodes are separated (due to network failure, etc), and subnetworks are operating without knowing 
            that they are isolated
        
    Chapter 9: Failure Detection (PDF 215)
        Can a failure detector be both efficient and accurate? 
            Nope.  One or the other.
        What is an outsourced hearbeat?
            Have a different node check (rather than doing it directly)
        How does a phi-accrual detector work?
            Instead of binary classification of whether a node is up or not, uses a sliding scale
            to assign probability a node is down
        What are the upsides/downsides of using a gossip protocol?
            A lot of network traffic...?

    Chapter 10: Leader Election (PDF 225)
        What is the safety property?  Do most election algorithms satisfy this property?
            Only one leader is ever elected at a time - this prevents split brain situation
        What is the liveness property?
            Most of the time a leader exists, and elections will produce a winner in a short time (whatever short happens to mean)
        What's the purpose of a having a leader?
            Synchronization optimization - having all nodes need to pass a lot of data to synchronize can be expensive
        What is the bully algorithm? (Monarchial algorithm)
            Node with highest priority/weight is automatically leader
        Can split brains still occur when using the bully algorithm?
            Yes, if networks are partitioned

    Chapter 11: Replication and Consistency (PDF 235)
        What are some reasons for replicating data? 
            Redundancy in case a node is lost (due to corruption, etc)
            Availability - faster response for client
        Why is availability useful for businesses?
            Faster is more money
        What is the relationship between consistency and linearizable?
            Linearizable means that a series of actions ...?
        What is CAP?
            consistency, availability, and partition tolerance
            But consistency and availability cannot both be possible
            One has to be relaxed a bit if the other is to be made stricter
        What is yield and harvest?
            One is percent of data received per request, and the other
            is the percent of requests that responded to successfully
            Have to trade one for the other in most (?) cases.
        Is linearizability different from sequential consistency?
        Do vector clocks deal with divergence?
            No, they only detect divergence
        What is the last-write-wins conflict strategy?
            The last write gets to stay in the database
        How many nodes are necessary for a quorum?
            More than half
        What is the purpose of consistency models?
        Why is a strict consistency model not possible to implement?
        What is the difference between a consistency model and session model?
        Why are witness replicas sometimes used in conjunciton with copy replicas?
            Less storage cost.  Nodes are either replica or witness nodes.  Replica
            nodes store data records, but witness nodes only store write events to data???
        Give an example of a strong consistency model and a weak consistency model.
        Where does the strong eventual consistency model fall on the strong/weak continuum?

    Chapter 12: Anti-Entropy and Dissemination (PDF 263)
        What is an anti-entropy mechanism for?
            Fixing any mismatch in data when encountered (to avoid the whole system going to shit)
        How does a read-repair work?
            When a record is read, check nodes for any inconsistent data in the given record
            and fix them if necessary
        How is using a digest-read more efficient than a basic read-repair?
            Send only a hash of the data instead of the while thing
        What is a hinted-handoff?
            Not sure...
        How is a simple read-repair different from using a merkle-tree to check for inconsistency between two replicas?
            A simple read-repair only checks the read record for inconsistencies, but a merkle tree can be used
            to check all the data between replicas.  The leaves of a merkle tree are hashes of the records, and the internal
            nodes and root of the merkle tree are hashs of the leaves.  Any change/difference in the leaves will be represented
            in the root, so only the root hashes need to be compared - any difference in the root hash will mean that there
            are inconsistencies between the data in the two replicas.
        What is the advantage of a push/lazy-push multicast tree?
            Less network congestion...?

    Chapter 13: Distributed Transactions (PDF 277)
        What does an atomic commitment algorithm give us? 
            Makes commitments in a distributed system
        In a two-phase commit algorithm, how are coordinators and cohorts related?
            Coordinator asks cohorts if a transaction is allowed to be commited
            All cohorts must agree.  If so, the coordinator sends out a message telling all
            cohorts to commit.
        What happens if during a two-phase commit a single cohort votes to NOT commit?
            The entire transaction is abandoned
        Are three-phase commits in common usage like two-phase commits?
            No.  It kinda solves the possible problem with coordinators suddenly dropping while cohorts
            are waiting for a response.  But it's complicated, and there are more problems...?  So it's
            not as commonly used (if at all)
        What are the purpose of Calvin and Spanner?  What functionality do these algorithms provide?
            Global deterministic transaction order - this simplifies coordination since the order
            of transactions is known by all nodes.
        What is sharding?  What is the goal of sharding?
            Replica nodes only store a subset of the data.  Then keys are used to route requests to
            the correct node with the desired data.  This can ease congestion.  Shards with higher
            frequency access can hold smaller subsets of the data.  

    Chapter 14: Consensus (PDF 299)
        Explain the three properties of consensus: agreement, validity, and termination.
        How is an atomic broadcast different from a flooding algorithm?
        Virtual synchrony <------- PDF302 START HERE

