TODO:
    Switch struct NodeMeta name to struct InternMeta

    Integrate struct LeafMeta and InterMeta into tree

    Finished _tree_split_internal, but fetch doesn't work
        Why are right internal node keys not in correct order?
            tree_insert_record <-------- this is problem.  Using root to track primary key, but not updating the child internal nodes
            Could make three node types: root, internal, and leaf
                then just keep some information in root (schema, primary key counter, maybe other stuff)
                data normalization of node meta data will probably help prevent all the complexity building up here
                Could have three types of metadata too - root, internal and leaf
                May be beneficial to create new function to split root (split leaf, split internal, split root)
                How about this: store things like schema and primary key counter in block 0 
                    And then start root on block 1.  Then we only need two types of nodes <--------this makes more sense
                    store schema and block size in metadata of file (NOT of node)

    Need to rebalance trees at some point since the auto-incrementing primary key will make tree
        right side heavy at some point.  Check tree balance after inserting record to see if
        rebalance is necessary

    Deleting records
        Should keys be reused?  How does sqlite do it?

    Switch to binary search in _tree_traverse_to_leaf (just using linear scan right now)

    Limit how many blocks are in buffer cache at a time - use least-recently used eviction policy

    Refactor code to make it more readable - splitting leaves is a mess now

    Allow fetch to get range of records by primary key - first step into creating an execution engine here

    How to implement execution engine:
        SQL parser and VM to run the bytecode

