    Efficiency of dbms can be estimated with number IO operations

    Use gdb to walk through code (Cherno recommended debugger to learn to read code)
        https://www.cs.yale.edu/homes/aspnes/pinewiki/C(2f)Debugging.html
        Try it on the xv6 (or the risc-v version) - would gdb even work with vm?

    https://github.com/firstcontributions/first-contributionsool
        go to this link and do a basic contribution

    Use ChatGPT to help write paper on neural network to learn
        eviction policy for pager - integration of neural networks
        into legacy code

    Use Yahoo or some other database standard metric to focus on core features

    cstack.github.io for short guide to basics of SQL implementation (not complete)

    Read Edward Sciore's book on implementing a relational database
        Chapter 4: Memory Management (PDF 92)

    Use SDL and Vulkan to visualize SQL + b-tree (2d first, and then 3d)
        visualize how b-tree grows and nodes split as new entries are added
        visualize how tree is traversed as data is queried
        use ipc (?) to have two programs talk to each other:
            use vdb REPL to modify database
            run visualization program to read vdb data to visualize it

    sqlite documentation has great explanation of how bytecode works

***********************Documentation*****************************
Example
Major components
Todos

**********************************Client**************************
The dbms should run as a server (rather than embedded) and have a scheduler that
    gives connecting clients the illusion that they have sole access to the dbms

    Seems like mysql uses tcp sockets

    Some basic SQL implemented in parser:
        vdb > connect 3000;
        vdb > show databases;
        vdb > create database school;
        vdb > open school;
        
        vdb:school > show tables;
        vdb:school > create table students (name string, age int, grad bool);
        vdb:school > describe students;
        vdb:school > insert into students (name, age, male) values ("Bob", 12, true);
        vdb:school > insert into students (name, age, male) values ("Kate", 13, false), ("John", 14, true);
        vdb:school > update students set name = "Jim", age = 12, male = true where id = 2;
        vdb:school > delete from students where id = 1;
        vdb:school > select * from students;
        vdb:school > select id, name from students;
        vdb:school > select id, name, male from students where age >= 12;
        vdb:school > drop table students;
        vdb:school > close school;

        vdb > drop database school;
        vdb > exit;

*******************************TODO**************************************************
    replace VdbField with VdbTokenType
        definitely shou
    run full test (use code main, just comment out cli_fun for now)

    Making program take in a script will make testing faster (rather than manually entering SQL each time)
        make VDBT_IF token type
        make VDBT_EXISTS token type

        parse:
            struct {
                struct VdbStmt action; //eg, drop table, drop database
            } ifexists;

    case VDBST_INSERT: <-----------START HERE
        need to fill non specified fields with 'null', and also rearrange attributes/values to fit schema
        but this requires rewriting code to use struct VdbValue

        Need an algorithm to rearrange attributes to fit schema attributes (naive, but fine for now)
            iterate through schema fields:
                check if any attribute name matches
                    if so, put corresponding value there
                    if not, put in null

        How about this: just have ALL insert statements insert the same thing (name string)
            get VdbValue working
            then return to the problem of getting VDBST_INSERT working correctly
            to test, just have SELECT get first record and print that out for now

            insert into [table] (name) values ("Mars");
                1 record(s) inserted into planets
            select * from [table];
                id: 1, name: Mars

        Really, it's just the schema that needs to change!!!
            make VDBT_NULL
            integrate that into schema system
            replace VdbField with VdbToken so that we can just pass tokens 
        

    case VDBST_UPDATE: {
        //TODO
        break;
    }
    case VDBST_DELETE: {
        //TODO
        break;
    }
    case VDBST_SELECT: {
        //TODO
        break;
    }

    need checks to prevent table manipulation/creation/dropping when database not open - segfaulting now

    Finish TODOs inside of vdb_execute
        uncomment vdb_execute in cli loop and test

    Schema should use enum VdbTokenType for data types rather than enum VdbField

    Use VdbData types rather than c-types
        add in NULL type
        add in float type
        along with string, int and boolean types already implemented

    Allow script to be read as optional argument rather than opening repl
        ./vdb -script my_script.sql
        ./vdb

    Use sample data to make sure SQL kinda works
        https://nssdc.gsfc.nasa.gov/planetary/factsheet/index.html
            use data here in sample database

            create table planets (name string, 
                                  mass float,
                                  diameter int, 
                                  density int, 
                                  gravity float, 
                                  escape_velocity float, 
                                  rotation_period float, 
                                  length_of_day float, 
                                  distance_from_sun float, 
                                  perihelion float, 
                                  orbital_period float, 
                                  orbital_velocity float, 
                                  orbital_inclination float, 
                                  orbital_eccentricity float, 
                                  obliquity_of_orbit float, 
                                  mean_temperature int, 
                                  surface_pressure float, 
                                  number_of_moons int, 
                                  ring_system bool, 
                                  global_magnetic_field bool); <----some of these will be NULL

            write SQL script to make database solar_system
            tables planets, moons, dwarf_planets

    Connect cli and the database tree to get useful data - play with MariaDB or MySQL to see how they print outputs
        > open school
            database school opened
        > select * from students
            +----+------+-----+
            | id | name | age |
            +----+------+-----+
            |  1 | John |  23 |
            |  2 | Kate |  12 |
            |  3 | Timm |  22 |
            +----+------+-----+
            3 rows in set
        > close school
            database school closed
            [what message?]

    Test making multiple trees - insert and fetch data from multiple trees (tables)

    Vdb Data Types - need this to allow NULL to be a value (specifically, represent the absence of a value)

    Cursor abstraction - would this be helpful as the intermediary between vdb.c and tree.c?
        will we need to know which attribute to index by? (primary key should be default)
        vdbcursor_to_end()
        vdbcursor_to(key)
        vdbcurosr_next()

    pager eviction policy
        make db really big so that the program crashes because of too much memory allocated, then evict pages to fix it
        Or just manually limit number of pages allowed to hold at a time
        Use O_DIRECT to bypass OS pager

    Foreign keys to connect two or more tables
        joins will be needed here

    Custom keys
        Unique or not?
        Have to rewrite tree to split/merge based on where inserted (since it will not be in order anymore)

    Concurrency - need to get read/write locks on file

    Transactions - need a way of rolling back changes if transaction fails

    Logging - database should never be in inconsistent state if system fails

************************Execution Engine**********************

    Execution engine
        selection WHERE
        projection SELECT 

        See SQL-92 for the standard to quality as 'supporting SQL'

        Foreign keys

