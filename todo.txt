    Efficiency of dbms can be estimated with number IO operations

    Use gdb to walk through code (Cherno recommended debugger to learn to read code)
        https://www.cs.yale.edu/homes/aspnes/pinewiki/C(2f)Debugging.html
        Try it on the xv6 (or the risc-v version) - would gdb even work with vm?

    https://github.com/firstcontributions/first-contributionsool
        go to this link and do a basic contribution

    Use ChatGPT to help write paper on neural network to learn
        eviction policy for pager - integration of neural networks
        into legacy code

    Use Yahoo or some other database standard metric to focus on core features

    cstack.github.io for short guide to basics of SQL implementation (not complete)

    Read Edward Sciore's book on implementing a relational database
        Chapter 4: Memory Management (PDF 92)

    Use SDL and Vulkan to visualize SQL + b-tree (2d first, and then 3d)
        visualize how b-tree grows and nodes split as new entries are added
        visualize how tree is traversed as data is queried
        use ipc (?) to have two programs talk to each other:
            use vdb REPL to modify database
            run visualization program to read vdb data to visualize it

    sqlite documentation has great explanation of how bytecode works

***********************Documentation*****************************
Example
Major components
Todos

**********************************Client**************************
The dbms should run as a server (rather than embedded) and have a scheduler that
    gives connecting clients the illusion that they have sole access to the dbms

    Seems like mysql uses tcp sockets

*******************************Storage Engine******************************************
    token.c
    lexer.c
    parser.c
    generator.c
    Put cli/parsing/tokens/lexing into own translation units

    Handle lexing/parsing errors
        next_token(parser) - go to next token without error checking
        consume_token(parser, type) - expect a certain type
        peek_token(parser) - just look without going to next token

        Give the user useful messages rather than segfaulting

    REPL
        basic parsing of commands
            > open school;
            > create table students (name string, age int, male bool);
            > insert into students (name, age, male) values ("Bob", 12, true);
            > insert into students (name, age, male) values ("Kate", 11, false);
            > insert into students (name, age, male) values ("Kate", 13, false);
            > update students set name = "Jim", age = 12, male = true where id = 2;
            > delete from students where id = 1;
            > select * from students;
            > select id, name from students;
            > select id, name, male from students where age >= 12;
            > drop table students;
            > close school;

        executing SQL to open/close databases, create/drop table, insert/update/delete/fetch records
        Have C code fill in database with default data first, then query in repl

    Connect cli and the database tree to get useful data - play with MariaDB or MySQL to see how they print outputs
        > open school
            [what message?]
        > select * from students
        > close school
            [what message?]

    Deal with parser errors
        have parser/lexer track errors and display them / not execute code

    Test making multiple trees - insert and fetch data from multiple trees (tables)

    Cursor abstraction - would this be helpful as the intermediary between vdb.c and tree.c?
        will we need to know which attribute to index by? (primary key should be default)
        vdbcursor_to_end()
        vdbcursor_to(key)
        vdbcurosr_next()

    pager eviction policy
        make db really big so that the program crashes because of too much memory allocated, then evict pages to fix it
        Or just manually limit number of pages allowed to hold at a time
        Use O_DIRECT to bypass OS pager

    Foreign keys to connect two or more tables
        joins will be needed here

    Custom keys
        Unique or not?
        Have to rewrite tree to split/merge based on where inserted (since it will not be in order anymore)

    Concurrency - need to get read/write locks on file

    Transactions - need a way of rolling back changes if transaction fails

    Logging - database should never be in inconsistent state if system fails

************************Execution Engine**********************

    Execution engine
        selection WHERE
        projection SELECT 

        See SQL-92 for the standard to quality as 'supporting SQL'

        Foreign keys

