    Efficiency of dbms can be estimated with number IO operations

    Use gdb to walk through code (Cherno recommended debugger to learn to read code)
        https://www.cs.yale.edu/homes/aspnes/pinewiki/C(2f)Debugging.html
        Try it on the xv6 (or the risc-v version) - would gdb even work with vm?

    https://github.com/firstcontributions/first-contributionsool
        go to this link and do a basic contribution

    Use ChatGPT to help write paper on neural network to learn
        eviction policy for pager - integration of neural networks
        into legacy code

    check out nandgame for website on how to create processor from scratch
        then try to do it using verilog

    Use Yahoo or some other database standard metric to focus on core features

    cstack.github.io for short guide to basics of SQL implementation (not complete)

    Read Edward Sciore's book on implementing a relational database
        Chapter 4: Memory Management (PDF 92)

    Use SDL and Vulkan to visualize stars/planets/moons in galaxy

    sqlite documentation has great explanation of how bytecode works

    handmade.network has cool mini projects (such as barebones OS with only a few thousand lines of C)

***********************Documentation*****************************
Example
Major components
Todos

*******************data****************************

Use sample data to make sure SQL kinda works
    https://nssdc.gsfc.nasa.gov/planetary/factsheet/index.html
    also look at moons/rings/comets/asteroids fact sheets

        create table planets
        create table moons
        create table rings
        create table comets
        create table asteroids

*******************************TODO**************************************************
    **********************Fixing Memory**********************
        node.c/h should not know about internal structure of struct VdbValue
            caller (tree) should just pass in size or request pointer of where a record starts
            uint32_t vdbdata_append_datum(uint8_t* buf, struct VdbDatum* datum, uint32_t* len_written)
                this function should be:
                    //attempst to allocated requested size, and will set allocated_size to what was possible
                    //returns the index of the index cell
                    uint32_t vdbdata_allocate_new_string_space(uint8_t* buf, uint32_t requested_size, uint32_t* allocated_size);

                    //caller (tree) should then write as much of string as possible and then allocate more space if needed
                    //caller then writes data to buffer (as musch as allocated_size)
                    uint8_t* vdbdata_get_string_ptr(uint8_t* buf, uint32_t idxcell_idx);

                    loop to allocate more space/write more data as needed in tree.c

        Set up system to track memory allocation/freeing
            need to write a wrapper for free that decrements whenever something is freed

        Integrate gdb and valgrind to check for common memory problems/leaks
            Need memory allocation/freeing controlled before implementing page eviction in buffer pool

    ************************************************

    vdb_insert_new - refactor this function
        inserting placeholder strings for nulls (automatic and manual insertion) is messy
        break it up into logical sub routines

    Add test for:
        insert_invalid_col_name.sql <----should report error message.  Silenty failing now when mistyped, and hard to debug
            create table planets (name string, moons int);
            insert into planets (name, gravity) values ("Earth", 9.81); //this should report error instead of setting moons to null and ignoring 9.81

    Remove key field in record and in node- this is now a regular attribute in records now
        will need to rewrite some functions that read keys from node buffers

    Add update and delete statements:
        cursor abstraction:
            cursors are created when starting a new transaction, and destroyed when transaction ends (commit or not)
            a cursor is associated with a table AND an ordering (eg, by which column the records are indexed)
            a cursor has a closed and open state:
                <open stmt> opens a cursor
                <close stmt>, <commit stmt>, or <rollback stmt> closes cursor
            cursor may be before first record or one past the last record
            fetch - moves cursor to next record and returns that record
            delete - deletes record pointed to by cursor - moves cursor to next record after deletion
            update - updates records pointed to by cursor

        to update
            struct VdbCursor* cursor = vdbcursor_init_at(h, table_name, key);
            initialize a cursor at key
            write record there

        to delete
            make sure increment skips deleted records
            initialize a cursor at key
            delete record there

    single line comments
        use c-style //

    multiline comments
        use c-style /**/

    Don't need to specify column names if inserting all values
        insert into planets values (...), (...);

    If block size is 256 and block header size is 128, it crashes if not enough room to store schema data
        the attribute names take too much space.  Need an overflow block for attribute strings.

    add more test cases
        use python to automate running of program with test scripts
        **Do this before writing bytecode generator and vm

    Compile AST to bytecode that runs on vm
        How could this work?
            what instructions are needed?
        when inserting, attribute names should be parsed as expressions (being parsed as single tokens now)
            can remove parse_identifier_tuple function then

            insert into planets (name, mass) values ("Mars", 242), ("Venus", 242), ("Earth", 534);

        
    need checks to prevent table manipulation/creation/dropping when database not open - segfaulting now

    need to return error if table doesn't exist when insert/select/update/delete - segfaulting now

    pager eviction policy
        make db really big so that the program crashes because of too much memory allocated, then evict pages to fix it
        Or just manually limit number of pages allowed to hold at a time
        Use O_DIRECT to bypass OS pager

    Concurrency - need to get read/write locks on file
        pager can take care of this

    Transactions - need a way of rolling back changes if transaction fails
        need a way to track undos (a stack???)

    Logging - database should never be in inconsistent state if system fails
        sqlite uses a write-ahead log


    Connect cli and the database tree to get useful data - play with MariaDB or MySQL to see how they print outputs
        > open school
            database school opened
        > select * from students
            +----+------+-----+
            | id | name | age |
            +----+------+-----+
            |  1 | John |  23 |
            |  2 | Kate |  12 |
            |  3 | Timm |  22 |
            +----+------+-----+
            3 rows in set
        > close school
            database school closed
            [what message?]

    Foreign keys to connect two or more tables
        joins will be needed here

    Custom keys
        Unique or not?
        Have to rewrite tree to split/merge based on where inserted (since it will not be in order anymore)

    views

    unique constraint

    not null constraint

    group by

    joins
    
    split into client and server - use tcp sockets to connect client to server
