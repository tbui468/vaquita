TODO:
    Write debug code to print out tree like this:
        1
            20
                2
                3
                4
            21
                5
                6
                7
            31
                8
                9
                10
                11
            32
                12
                13
                14

        This will make writing code to rebalance/debugging easier

        Function will need access to the depth in order to indent correctly

    Need to rebalance trees at some point since the auto-incrementing primary key will make tree
        Add a ton of entries and check tree height
        right side heavy at some point.  Check tree balance after inserting record to see if
        rebalance is necessary

    Deleting records
        Should keys be reused?  How does sqlite do it?

    Switch to binary search in _tree_traverse_to_leaf (just using linear scan right now)

    Limit how many blocks are in buffer cache at a time - use least-recently used eviction policy

    Refactor code to make it more readable - splitting leaves is a mess now

    Allow fetch to get range of records by primary key - first step into creating an execution engine here

    How to implement execution engine:
        SQL parser and VM to run the bytecode

